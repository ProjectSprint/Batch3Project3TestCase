I need help to finish this requirement, here is the requirement and the base code that I've already written
remember to honor the file name convention, linter, typescript rule, and existing code

### Authentication & Authorization

**Background:**

Seller can register to the app

**Contract:**

- POST /v1/login/email

    Request Body:

    ```javascript
    {
      "email": "name@name.com", // string | required | should be email
      "password": "asdfasdf", // string | required | minLength: 8 | maxLength: 32
    }
    ```

    Response:

    - `200` Ok for existing user

        ```javascript
        {
          "email": "name@name.com",
          "phone": "", // empty string not yet linked
          "token": "asdfasdf" // string | use any token you want
        }
        ```

    - `400` Bad Request case:

        - Validation error

    - `404` Not Found case:

        - Email is not found

    - `500` Server Error

- POST /v1/login/phone

    Request Body:

    ```javascript
    {
      "phone": "+12332324", // string | required | should begin with international calling number with "+" prefix
      "password": "asdfasdf", // string | required | minLength: 8 | maxLength: 32
    }
    ```

    Response:

    - `200` Ok for existing user

        ```javascript
        {
          "phone": "+61221321313", // string | required | should begin with international calling number with "+" prefix
          "email": "", // empty string not yet linked
          "token": "asdfasdf" // string | use any token you want
        }
        ```

    - `400` Bad Request case:

        - Validation error

    - `404` Not Found case:

        - phone is not found

    - `500` Server Error

- POST /v1/register/email

    Request Body:

    ```javascript
    {
      "email": "name@name.com", // string | required | should in email format
      "password": "asdfasdf", // string | required | minLength: 8 | maxLength: 32
    }
    ```

    Response:

    - `201` Created for new user

        ```javascript
        {
          "email": "name@name.com",
          "phone": "", // empty string if first registering
          "token": "asdfasdf" // string | use any token you want
        }
        ```

    - `400` Bad Request case:

        - Validation error

    - `409` Conflict case:

        - Email is exist

    - `500` Server Error

- POST /v1/register/phone

    Request Body:

    ```javascript
    {
      "phone": "+61221321313", // string | required | should begin with international calling number with "+" prefix
      "password": "asdfasdf", // string | required | minLength: 8 | maxLength: 32
    }
    ```

    Response:

    - `201` Created for new user

        ```javascript
        {
          "phone": "+611231123131",
          "email": "", // empty string if first registering
          "token": "asdfasdf" // string | use any token you want
        }
        ```

    - `400` Bad Request case:

        - Validation error

    - `409` Conflict case:

        - phoe is exist

    - `500` Server Error

---

### Profile management

**Background:**

Seller can choose their preference, this is done after registering

**Contract:**

- GET /v1/user

    Header:

    | **key**       | **value**  |
    | :------------ | :--------- |
    | Authorization | bearer ... |

    Response:

    - `200` Ok

        ```javascript
        {
          "email": "name@name.com", // empty string when not linked
          "phone": "", // empty string when not linked
          "fileId": "", // empty string when not added
          "fileUri": "", // empty string when not added
          "fileThumbnailUri": "", // related file added
          "bankAccountName": "",
          "bankAccountHolder": "",
          "bankAccountNumber": "",
        }
        ```

    - `401` Unauthorized for

        - expired / invalid / missing request token

    - `500` Server Error

- PUT /v1/user

    Header:

    | **key**       | **value**  |
    | :------------ | :--------- |
    | Authorization | bearer ... |

    Request Body:

    ```javascript
    {
      "fileId": "", // string | not required | should be a valid fileId
      "bankAccountName": "", // string | required | minLength: 4 | maxLength | 32
      "bankAccountHolder": "", // string | required | minLength: 4 | maxLength | 32
      "bankAccountNumber": "", // string | required | minLength: 4 | maxLength | 32
    }
    ```

    Response:

    - `200` Ok

        ```javascript
        {
          "email": "name@name.com",
          "phone": "",
          "fileId": "",
          "fileUri": "", // related file uri
          "fileThumbnailUri": "", // related file uri
          "bankAccountName": "",
          "bankAccountHolder": "",
          "bankAccountNumber": "",
        }
        ```

    - `400` Bad Request for:

        - Validation error

        - `fileId` is not valid / exists

    - `401` Unauthorized for

        - Expired / invalid / missing request token

    - `500` Server Error

- POST /v1/user/link/phone

    Header:

    | **key**       | **value**  |
    | :------------ | :--------- |
    | Authorization | bearer ... |

    Request Body:

    ```javascript
    {
      "phone": "", // string | required | should begin with international calling number with "+" prefix
    }
    ```

    Response:

    - `200` Ok

        ```javascript
        {
          "email": "name@name.com",
          "phone": "",
          "fileId": "",
          "fileUri": "", // related file uri
          "fileThumbnailUri": "", // related file uri
          "bankAccountName": "",
          "bankAccountHolder": "",
          "bankAccountNumber": "",
        }
        ```

    - `400` Bad Request for:

        - Validation error

    - `409` Conflict for:

        - phone is taken

    - `401` Unauthorized for

        - Expired / invalid / missing request token

    - `500` Server Error

- POST /v1/user/link/email

    Header:

    | **key**       | **value**  |
    | :------------ | :--------- |
    | Authorization | bearer ... |

    Request Body:

    ```javascript
    {
      "email": "", // string | required | should in email format
    }
    ```

    Response:

    - `200` Ok

        ```javascript
        {
          "email": "name@name.com",
          "phone": "",
          "fileId": "",
          "fileUri": "", // related file uri
          "fileThumbnailUri": "", // related file uri
          "bankAccountName": "",
          "bankAccountHolder": "",
          "bankAccountNumber": "",
        }
        ```

    - `400` Bad Request for:

        - Validation error

    - `409` Conflict for:

        - email is taken

    - `401` Unauthorized for

        - Expired / invalid / missing request token

    - `500` Server Error

---

### File Upload

**Background:**

User can upload files

**Contract:**

- POST /v1/file

    Request Multipart Form-Data:

    | **key** | **value type**                                  |
    | :------ | :---------------------------------------------- |
    | flle    | file \| should be jpeg / jpg / png | max 100KiB |

    Response:

    - `200` Ok

        ```javascript
        {
          "fileId": "" // string | use any id you want
          "fileUri": "namename.com/file.jpg", // should be the URI from AWS S3
          "fileThumbnailUri": "namename.com/file.jpg", // no bigger than 10KB | should be the URI from AWS S3
        }
        ```

    - `400` Bad Request case:

        - Validation error

    - `500` Server Error

---

### Product

**Background:**

Seller can manage their product

**Contract:**

- **POST /v1/product**

    Header:

    | **key**       | **value**  |
    | :------------ | :--------- |
    | Authorization | bearer ... |

    Request Body:

    ```javascript
    {
      "name": "", // string | required | minLength: 4 | maxLength: 32
      "category": "", // string | required | should be enum of product category types table
      "qty": 1, // number | required | min: 1
      "price": 100, // number | required | min: 100
      "sku": "", // string | required | minLength: 0 | maxLength: 32
      "fileId": "", // string | required | should be a valid fileId
    }
    ```

    Response:

    - `201` Created

        ```javascript
        {
          "productId": "",  // string | Use any id you want
          "name": "",
          "category": "",
          "qty": 1,
          "price": 100,
          "sku": "",
          "fileId": "",
          "fileUri": "", // related file uri
          "fileThumbnailUri": "", // related file uri
          "createdAt": ""
          "updatedAt": ""
        }
        ```

    - `400` Bad Request case:

        - Validation error

        - `fileId` is not valid / exists

    - `409` Conflict

        - `sku` already exists (per account basis)

    - `401` Unauthorized for

        - expired / invalid / missing request token

    - `500` Server Error

- **GET /v1/product**

    This path does not require authorization header, hence can be accessed by anyone

    Request params (all optional)

    All of below query should be using `AND`

    - `limit` & `offset` limit the output of the data

        - default `limit=5&offset=0`

        - value should be a number

        - invalid `limit` / `offset` value will using  the default value

    - `productId` filter the result based on productId

        - search should be a exact match

        - value should be a string

        - invalid value will be ignored

    - `sku` filter the result based on sku

        - search should be a exact match

        - value should be a string

        - invalid value will be ignored

    - `category` filter the result based on category

        - search should be a enum based on product category table

        - value should be a string

        - invalid value will be ignored

    - `sortBy` filter the result based on doneAt

        - search should be a enum from these value

            - `newest` sorts by items that have newer `createdAt` & `updatedAt` (which one comes first)

            - `oldest` sorts by items that have newer `createdAt` & `updatedAt` (which one comes first)

            - `cheapest` sorts by items that have cheapest price first

            - `expensive` sorts by items that have expensive price first

        - invalid value will be ignored



    Response:

    - `200` Ok

        ```javascript
        [
          {
            "productId": "",  // string | Use any id you want
            "name": "",
            "category": "",
            "qty": 1,
            "price": 100,
            "sku": "",
            "fileId": "",
            "fileUri": "", // related file uri
            "fileThumbnailUri": "", // related file uri
            "createdAt": ""
            "updatedAt": ""
          }
        ]
        ```

    - `500` Server Error



- **PUT /v1/product/:productId**

    Header:

    | **key**       | **value**  |
    | :------------ | :--------- |
    | Authorization | bearer ... |

    Request Body:

    ```javascript
    {
      "name": "", // string | required | minLength: 4 | maxLength: 32
      "category": "", // string | required | should be enum of product category types table
      "qty": 1, // number | required | min: 1
      "price": 100, // number | required | min: 100
      "sku": "", // string | required | minLength: 0 | maxLength: 32
      "fileId": "", // string | required | should be a valid fileId
    }
    ```

    Response:

    - `200` Ok

        ```javascript
        {
          "productId": "",  // string | Use any id you want
          "name": "",
          "category": "",
          "qty": 1,
          "price": 100,
          "sku": "",
          "fileId": "",
          "fileUri": "", // related file uri
          "fileThumbnailUri": "", // related file uri
          "createdAt": ""
          "updatedAt": ""
        }
        ```

    - `400` Bad Request case:

        - Validation error

        - `fileId` is not valid / exists

    - `404` Not Found case:

        - `productId` is not found

    - `409` Conflict

        - `sku` already exists (per account basis)

    - `401` Unauthorized for

        - expired / invalid / missing request token

    - `500` Server Error

- **DELETE /v1/product/:productId**

    Header:

    | **key**       | **value**  |
    | :------------ | :--------- |
    | Authorization | bearer ... |

    Response:

    - `200` Ok deleted

    - `404` Not Found case:

        - `productId` is not found

    - `401` Unauthorized for

        - expired / invalid / missing request token

    - `500` Server Error

---

### Purchase

**Background:**

Customer can purchase the product

**Contract:**

- **POST /v1/purchase**

    Customer can add their item to cart so they can pay them

    ⚠️ Copy the product information here, if the product quantity is updated when the item is already added to cart by someone else, use the copied information as the source of truth! Not the original
    ​
    ​⚠️ Race condition will not be tested

    Request Body:

    ```javascript
    {
      "purchasedItems": [ // array | minItems: 1
        {
          "productId": "", // string | should a valid productId
          "qty": 1, // number | min: 2
        },
      ],
      "senderName": "", // string | required | minLength: 4 | maxLength: 55
      "senderContactType": "", // string | required | enum of "email" / "phone"
      "senderContactDetail": "", // string | required | if "phone" then validates the phone number | if "email" then validates email
    }
    ```

    Response:

    - `201` Created

        ```javascript
        {
          "purchaseId": "", // string | Use any id you want
          "purchasedItems": [
            {
              "productId": "",  // string | Use any id you want
              "name": "",
              "category": "",
              "qty": 1, // qty before bought
              "price": 100,
              "sku": "",
              "fileId": "",
              "fileUri": "", // related file uri
              "fileThumbnailUri": "", // related file uri
              "createdAt": ""
              "updatedAt": ""
            }
          ],
          "totalPrice": 1, // number | should total of all the products bought
          "paymentDetails": [{ // collection of the seller bank account information that the user bought | if user bought 3 item from 1 seller, then show 1, but if user bought 3 each from different sellers, then show 3, etc
            "bankAccountName": "",
            "bankAccountHolder": "",
            "bankAccountNumber": "",
            "totalPrice": 1, // number | should total of the bought product that the seller owns
          }]
        }
        ```

    - `400` Bad Request case:

        - Validation error

        - product qty is out / bought more than the available qty

    - `500` Server Error

- **POST /v1/purchase/:purchaseId**

    Customer can upload their payment proof photo here

    ⚠️ After payment, decrease the real product quantity, if the real product quantity is `0` when this purchase happen, it's okay to decrease it even until negative values like `-1`



    ⚠️ Race condition will not be tested

    Request Body:

    ```javascript
    {
      "fileIds": [""], // array of string | required | should be a valid fileId | if the payment details contain 3 bank accounts, this should be contains 3 fileIds, etc
    }
    ```

    Response:

    - `201` Created

    - `400` Bad Request case:

        - Validation error

        - flieId is invalid / not exists / not equal to the available sellers in the cart

    - `500` Server Error




=== File: src/routes.ts ===
import { Type } from "@fastify/type-provider-typebox";
import { StatusCodes } from "http-status-codes";
import { Server } from "./types.js";

export function registerAuthHandler(s: Server) {
  // this is just a sample handler
  s.post(
    "/",
    {
      schema: {
        body: Type.Object({
          name: Type.String(),
          nickname: Type.String(),
          email: Type.String(),
          package: Type.String(),
          addOns: Type.Optional(Type.Array(Type.String())),
          discounts: Type.Optional(Type.Array(Type.String())),
          socialMediaUsername: Type.String(),
          preferredTeammateDiscordId: Type.String(),
        }),
      },
    },
    async (req, res) => {
      res.status(StatusCodes.OK).send({ message: "ok" });
    },
  );
}
=== File: src/provider.db.ts ===
import Datastore from "nedb";

export const userCollection = new Datastore({
  filename: "./data/users.db",
  autoload: true,
});

export const activityCollection = new Datastore({
  filename: "./data/activities.db",
  autoload: true,
});
=== File: src/main.ts ===
import { fastify } from "fastify";
import { TypeBoxTypeProvider } from "@fastify/type-provider-typebox";
import { StatusCodes } from "http-status-codes";

const server = fastify({ }).withTypeProvider<TypeBoxTypeProvider>();


server.setErrorHandler(function (error, _, reply) {
  if (error.statusCode) {
    if (error.statusCode == StatusCodes.BAD_REQUEST.valueOf()) {
      reply.status(StatusCodes.BAD_REQUEST).type("application/json").send({
        message: error.message,
      });
      return;
    }

    console.warn(JSON.stringify(error));
    reply.status(error.statusCode).type("application/json").send({
      message: error.message,
    });
    return;
  }

  console.error(error);
  reply.status(StatusCodes.INTERNAL_SERVER_ERROR).send();
  return;
});

server.listen({ port: 30000 }, function (err, _) {
  if (err) {
    console.error(err, "Error when listening");
    process.exit(1);
  }
});

=== File: src/types.auth.ts ===
export const enum ActivityType {
  Walking = "Walking",
  Yoga = "Yoga",
  Stretching = "Stretching",
  Cycling = "Cycling",
  Swimming = "Swimming",
  Dancing = "Dancing",
  Hiking = "Hiking",
  Running = "Running",
  HIIT = "HIIT",
  JumpRope = "JumpRope",
}

export type ActivityTypeValue = keyof typeof ActivityType;

export const CALORIES_PER_MINUTE: Record<ActivityTypeValue, number> = {
  [ActivityType.Walking]: 4,
  [ActivityType.Yoga]: 4,
  [ActivityType.Stretching]: 4,
  [ActivityType.Cycling]: 8,
  [ActivityType.Swimming]: 8,
  [ActivityType.Dancing]: 8,
  [ActivityType.Hiking]: 10,
  [ActivityType.Running]: 10,
  [ActivityType.HIIT]: 10,
  [ActivityType.JumpRope]: 10,
};

export interface User {
  _id?: string;
  email: string;
  password: string;
  preference: string | null;
  weightUnit: string | null;
  heightUnit: string | null;
  weight: number | null;
  height: number | null;
  name: string | null;
  imageUri: string | null;
  createdAt: string;
}

export interface Activity {
  _id: string;
  userId: string;
  activityType: ActivityTypeValue;
  doneAt: string; // ISO Date
  durationInMinutes: number;
  caloriesBurned: number;
  createdAt: string;
  updatedAt: string;
}

export interface ActivityFilters {
  activityType?: ActivityTypeValue;
  doneAtFrom?: string;
  doneAtTo?: string;
  caloriesBurnedMin?: number;
  caloriesBurnedMax?: number;
}
=== File: src/helper.auth.ts ===
=== File: src/types.ts ===
import { TypeBoxTypeProvider } from "@fastify/type-provider-typebox";
import {
  FastifyBaseLogger,
  FastifyInstance,
  RawReplyDefaultExpression,
  RawRequestDefaultExpression,
  RawServerDefault,
} from "fastify";

export type Server = FastifyInstance<
  RawServerDefault,
  RawRequestDefaultExpression<RawServerDefault>,
  RawReplyDefaultExpression<RawServerDefault>,
  FastifyBaseLogger,
  TypeBoxTypeProvider
>;
=== File: src/repo.activity.ts ===
=== File: src/repo.user.ts ===
=== File: src/provider.file.ts ===
import multer from "multer";
import { v4 as uuidv4 } from "uuid";
import path from "path";
import fs from "fs-extra";

const UPLOAD_DIR = "./uploads";
fs.ensureDirSync(UPLOAD_DIR);

const storage = multer.memoryStorage();

export const upload = multer({
  storage,
  limits: { fileSize: 100 * 1024 }, // 100 KiB
  fileFilter: (
    _req: Express.Request,
    file: Express.Multer.File,
    cb: multer.FileFilterCallback,
  ) => {
    const allowedMimes = ["image/jpeg", "image/jpg", "image/png"];
    if (allowedMimes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error("Invalid file type. Only JPG, JPEG, PNG allowed."));
    }
  },
}).single("file");

export function generateFileUri(email: string, originalName: string): string {
  const ext = path.extname(originalName);
  const safeName = `${email}/${uuidv4()}${ext}`;
  return safeName;
}

export async function saveFile(buffer: Buffer, uri: string): Promise<void> {
  const filePath = path.join(UPLOAD_DIR, uri);
  const dir = path.dirname(filePath);
  await fs.ensureDir(dir);
  await fs.writeFile(filePath, buffer);
}
=== File: tsconfig.json ===
{
  "include": [
    "src/**/*"
  ],
  "exclude": [
    "node_modules",
    "dist"
  ],
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */
    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */
    /* Language and Environment */
    "target": "ES2022", /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "libReplacement": true,                           /* Enable lib replacement. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */
    /* Modules */
    "module": "nodenext", /* Specify what module code is generated. */
    "rootDir": "./src", /* Specify the root folder within your source files. */
    "moduleResolution": "node16", /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    "types": [
      "node"
    ], /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "rewriteRelativeImportExtensions": true,          /* Rewrite '.ts', '.tsx', '.mts', and '.cts' file extensions in relative import paths to their JavaScript equivalent in output files. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "noUncheckedSideEffectImports": true,             /* Check side effect imports. */
    "resolveJsonModule": true, /* Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */
    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */
    /* Emit */
    "declaration": true, /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    "declarationMap": true, /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    "sourceMap": true, /* Create source map files for emitted JavaScript files. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./dist", /* Specify an output folder for all emitted files. */
    "removeComments": true, /* Disable emitting comments. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "isolatedDeclarations": true,                     /* Require sufficient annotation on exports so other tools can trivially generate declaration files. */
    // "erasableSyntaxOnly": true,                       /* Do not allow runtime constructs that are not part of ECMAScript. */
    "allowSyntheticDefaultImports": true, /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true, /* Ensure that casing is correct in imports. */
    /* Type Checking */
    "strict": true, /* Enable all strict type-checking options. */
    "noImplicitAny": true, /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    "strictFunctionTypes": true, /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "strictBuiltinIteratorReturn": true,              /* Built-in iterators are instantiated with a 'TReturn' type of 'undefined' instead of 'any'. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    "noUnusedLocals": true, /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": true, /* Raise an error when a function parameter isn't read. */
    "exactOptionalPropertyTypes": true, /* Interpret optional property types as written, rather than adding 'undefined'. */
    "noImplicitReturns": true, /* Enable error reporting for codepaths that do not explicitly return in a function. */
    "noFallthroughCasesInSwitch": true, /* Enable error reporting for fallthrough cases in switch statements. */
    "noUncheckedIndexedAccess": true, /* Add 'undefined' to a type when accessed using an index. */
    "noImplicitOverride": true, /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */
    /* Completeness */
    "skipDefaultLibCheck": true, /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  }
}

=== File: eslint.config.mjs ===
import tseslint from "@typescript-eslint/eslint-plugin";
import tsparser from "@typescript-eslint/parser";
import prettierPlugin from "eslint-plugin-prettier";
import prettierConfig from "eslint-config-prettier";

/** @type {import('eslint').Linter.Config[]} */
export default [
  // ============================
  // ./test (k6 environment)
  // ============================
  {
    files: ["test/**/*.js"],
    languageOptions: {
      ecmaVersion: 2019, // k6 supports ES2019 (no optional chaining, etc.)
      sourceType: "module",
      parserOptions: {
        project: "./test.tsconfig.json", // ✅ points to your existing tsconfig
      },
    },
    rules: {
      "object-shorthand": ["error", "never"],
      "no-unused-expressions": [
        "error",
        {
          allowShortCircuit: false,
          allowTernary: true,
        },
      ],
      "no-restricted-syntax": [
        "error",
        {
          selector: "LogicalExpression[operator='??']",
          message: "Nullish coalescing operator is not supported in k6",
        },
        {
          selector: "OptionalChaining",
          message: "Optional chaining (?.) is not supported in k6",
        },
        {
          selector: "PrivateIdentifier",
          message: "Private class fields are not supported in k6",
        },
      ],
      "no-async-promise-executor": "error",
      "no-await-in-loop": "error",
      "no-console": ["error", { allow: ["log", "warn", "error"] }],
      "no-import-assign": "error",
      "no-restricted-imports": [
        "error",
        {
          patterns: [
            {
              group: ["test/*"],
              message:
                "Please use relative imports instead of importing from 'test/'",
            },
          ],
        },
      ],
      "no-restricted-properties": [
        "error",
        {
          object: "Array",
          property: "flatMap",
          message: "Array.flatMap() is not supported in k6",
        },
        {
          object: "Array",
          property: "flat",
          message: "Array.flat() is not supported in k6",
        },
        {
          object: "Object",
          property: "fromEntries",
          message: "Object.fromEntries() is not supported in k6",
        },
      ],
      "no-restricted-globals": [
        "error",
        {
          name: "globalThis",
          message: "globalThis is not supported in k6",
        },
      ],
    },
  },
  // ============================
  // ./src (Node.js 24 + TypeScript)
  // ============================
  {
    files: ["src/**/*.{js,ts,tsx}"],
    languageOptions: {
      parser: tsparser,
      parserOptions: {
        ecmaVersion: "latest",
        sourceType: "module",
        project: "./tsconfig.json",
      },
    },
    plugins: {
      "@typescript-eslint": tseslint,
      prettier: prettierPlugin,
    },
    rules: {
      ...tseslint.configs.recommended.rules,
      ...tseslint.configs["recommended-requiring-type-checking"].rules,
      ...prettierConfig.rules,

      // TypeScript specific rules
      "@typescript-eslint/no-unused-vars": [
        "error",
        { argsIgnorePattern: "^_" },
      ],
      "@typescript-eslint/no-explicit-any": "warn",
      "@typescript-eslint/explicit-function-return-type": "off",
      "@typescript-eslint/explicit-module-boundary-types": "off",
      "@typescript-eslint/await-thenable": "error",
      "@typescript-eslint/no-misused-promises": "error",

      "@typescript-eslint/no-floating-promises": "off",
      "@typescript-eslint/no-unsafe-argument": "off",
      "@typescript-eslint/no-unsafe-assignment": "off",
      "@typescript-eslint/no-unsafe-call": "off",
      "@typescript-eslint/no-unsafe-member-access": "off",

      // General rules
      "no-console": "warn",
      "prefer-const": "error",
      "no-var": "error",
      "object-shorthand": "error",
    },
  },
];
